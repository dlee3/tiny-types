[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/TinyType.ts",
    "content": "import { JSONValue } from './types';\n\n/**\n * @desc The {@link TinyTypeOf} can be used to define simple\n * single-value {@link TinyType}s on a single line.\n *\n * @example\n * class Username extends TinyTypeOf<string>() {}\n *\n * @example\n * class Age extends TinyTypeOf<number>() {}\n *\n * @returns a dynamically created base class your tiny type can extend from\n */\nexport function TinyTypeOf<T>(): { new(_: T): { value: T } & TinyType } {\n    return class extends TinyType {\n        constructor(public readonly value: T) {\n            super();\n        }\n    };\n}\n\n/**\n * @desc The {@link TinyType} abstract class should be used as a base class for your own Tiny Types.\n *\n * If you want the Tiny Type to wrap a single value use the {@link TinyTypeOf} instead as it will save you some keystrokes.\n *\n * @example\n * class FirstName extends TinyTypeOf<string>() {}\n * class LastName  extends TinyTypeOf<string>() {}\n * class Age       extends TinyTypeOf<number>() {}\n *\n * class Person extends TinyType {\n *   constructor(public readonly firstName: FirstName,\n *               public readonly lastName:  LastName,\n *               public readonly age:       Age,\n *   ) {\n *     super();\n *   }\n * }\n */\nexport abstract class TinyType {\n\n    /**\n     * @desc Compares two tiny types by value\n     *\n     * @example <caption>Comparing simple types</caption>\n     * class Id extends TinyTypeOf<string>() {}\n     *\n     * const id = new Id(`3cc0852d-fda7-4f61-874e-0cfadbd6182a`);\n     *\n     * id.equals(id) === true\n     *\n     * @example <caption>Comparing complex types recursively</caption>\n     * class FirstName extends TinyTypeOf<string>() {}\n     * class LastName  extends TinyTypeOf<string>() {}\n     * class Age       extends TinyTypeOf<number>() {}\n     *\n     * class Person extends TinyType {\n     *   constructor(public readonly firstName: FirstName,\n     *               public readonly lastName:  LastName,\n     *               public readonly age:       Age,\n     *   ) {\n     *     super();\n     *   }\n     * }\n     *\n     * const p1 = new Person(new FirstName('John'), new LastName('Smith'), new Age(42)),\n     *       p2 = new Person(new FirstName('John'), new LastName('Smith'), new Age(42));\n     *\n     * p1.equals(p2) === true\n     *\n     * @param {TinyType} another\n     * @returns {boolean}\n     */\n    equals(another: TinyType) {\n        if (another === this) {\n            return true;\n        }\n\n        if (! (another instanceof this.constructor)) {\n            return false;\n        }\n\n        return this.significantFields().reduce((previousFieldsAreEqual: boolean, field: string) => {\n\n            const currentFieldIsEqual = (this[field].equals\n                ? this[field].equals(another[field])\n                : this[field] === another[field]);\n\n            return previousFieldsAreEqual && currentFieldIsEqual;\n        }, true);\n    }\n\n    toString() {\n        const fields = this.significantFields().reduce((acc: string[], field: string) => {\n            return acc.concat(`${field}=${this[field]}`);\n        }, []);\n\n        return `${this.constructor.name}(${fields.join(', ')})`;\n    }\n\n    /**\n     * @desc Serialises the object to a JSON representation.\n     *\n     * @example\n     * class FirstName extends TinyTypeOf<string>() {}\n     *\n     * const name = new FirstName('Jan');\n     *\n     * name.toJSON() === 'Jan'\n     *\n     * @example\n     * class FirstName extends TinyTypeOf<string>() {}\n     * class LastName  extends TinyTypeOf<string>() {}\n     * class Age       extends TinyTypeOf<number>() {}\n     *\n     * class Person extends TinyType {\n     *   constructor(public readonly firstName: FirstName,\n     *               public readonly lastName:  LastName,\n     *               public readonly age:       Age,\n     *   ) {\n     *     super();\n     *   }\n     * }\n     *\n     * const person = new Person(new FirstName('John'), new LastName('Smith'), new Age(42)),\n     *\n     * person.toJSON() === { firstName: 'John', lastName: 'Smith', age: 42 }\n     *\n     * @returns {JSONValue}\n     */\n    // todo: serialise arrays\n    toJSON(): JSONValue {\n        const isPrimitive = (value: any) => Object(value) !== value;\n        function toJSON(value: any) {\n            switch (true) {\n                case value && !! value.toJSON:\n                    return value.toJSON();\n                case value && ! isPrimitive(value):\n                    return JSON.stringify(value);\n                default:\n                    return value;\n            }\n        }\n\n        const fields = this.significantFields();\n\n        if (fields.length === 1) {\n            return toJSON(this[fields[0]]);\n        }\n\n        return fields.reduce((acc, field) => {\n            acc[field] = toJSON(this[field]);\n            return acc;\n        }, {});\n    }\n\n    /**\n     * @access private\n     * @returns {string[]} names of significant fields that determine the identity of the object\n     */\n    private significantFields(): string[] {\n        return Object.getOwnPropertyNames(this)\n            .filter(field => typeof this[field] !== 'function')\n            .sort();\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/TinyType.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "TinyTypeOf",
    "memberof": "src/TinyType.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TinyType.ts~TinyTypeOf",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/TinyType",
    "importStyle": "{TinyTypeOf}",
    "description": "The {@link TinyTypeOf} can be used to define simple\nsingle-value {@link TinyType}s on a single line.",
    "examples": [
      "class Username extends TinyTypeOf<string>() {}",
      "class Age extends TinyTypeOf<number>() {}"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "a dynamically created base class your tiny type can extend from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a dynamically created base class your tiny type can extend from"
    },
    "params": []
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "TinyType",
    "memberof": "src/TinyType.ts",
    "static": true,
    "longname": "src/TinyType.ts~TinyType",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/TinyType",
    "importStyle": "{TinyType}",
    "description": "The {@link TinyType} abstract class should be used as a base class for your own Tiny Types.\n\nIf you want the Tiny Type to wrap a single value use the {@link TinyTypeOf} instead as it will save you some keystrokes.",
    "examples": [
      "class FirstName extends TinyTypeOf<string>() {}\nclass LastName  extends TinyTypeOf<string>() {}\nclass Age       extends TinyTypeOf<number>() {}\n\nclass Person extends TinyType {\n  constructor(public readonly firstName: FirstName,\n              public readonly lastName:  LastName,\n              public readonly age:       Age,\n  ) {\n    super();\n  }\n}"
    ],
    "lineNumber": 52,
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "equals",
    "memberof": "src/TinyType.ts~TinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TinyType.ts~TinyType#equals",
    "access": "public",
    "description": "Compares two tiny types by value",
    "examples": [
      "<caption>Comparing simple types</caption>\nclass Id extends TinyTypeOf<string>() {}\n\nconst id = new Id(`3cc0852d-fda7-4f61-874e-0cfadbd6182a`);\n\nid.equals(id) === true",
      "<caption>Comparing complex types recursively</caption>\nclass FirstName extends TinyTypeOf<string>() {}\nclass LastName  extends TinyTypeOf<string>() {}\nclass Age       extends TinyTypeOf<number>() {}\n\nclass Person extends TinyType {\n  constructor(public readonly firstName: FirstName,\n              public readonly lastName:  LastName,\n              public readonly age:       Age,\n  ) {\n    super();\n  }\n}\n\nconst p1 = new Person(new FirstName('John'), new LastName('Smith'), new Age(42)),\n      p2 = new Person(new FirstName('John'), new LastName('Smith'), new Age(42));\n\np1.equals(p2) === true"
    ],
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TinyType"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "toString",
    "memberof": "src/TinyType.ts~TinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TinyType.ts~TinyType#toString",
    "access": "public",
    "description": "",
    "lineNumber": 95,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/TinyType.ts~TinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TinyType.ts~TinyType#toJSON",
    "access": "public",
    "description": "Serialises the object to a JSON representation.",
    "examples": [
      "class FirstName extends TinyTypeOf<string>() {}\n\nconst name = new FirstName('Jan');\n\nname.toJSON() === 'Jan'",
      "class FirstName extends TinyTypeOf<string>() {}\nclass LastName  extends TinyTypeOf<string>() {}\nclass Age       extends TinyTypeOf<number>() {}\n\nclass Person extends TinyType {\n  constructor(public readonly firstName: FirstName,\n              public readonly lastName:  LastName,\n              public readonly age:       Age,\n  ) {\n    super();\n  }\n}\n\nconst person = new Person(new FirstName('John'), new LastName('Smith'), new Age(42)),\n\nperson.toJSON() === { firstName: 'John', lastName: 'Smith', age: 42 }"
    ],
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{JSONValue}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSONValue"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "significantFields",
    "memberof": "src/TinyType.ts~TinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TinyType.ts~TinyType#significantFields",
    "access": "private",
    "description": "",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]} names of significant fields that determine the identity of the object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "names of significant fields that determine the identity of the object"
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/index.ts",
    "content": "export * from './match';\nexport * from './pattern-matching/PatternMatcher';\nexport * from './TinyType';\nexport { JSONArray, JSONObject, JSONPrimitive, JSONValue } from './types';\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/match.ts",
    "content": "import { IdentityMatcher, ObjectMatcher, PatternMatcher, StringMatcher } from './pattern-matching';\nimport { TinyType } from './TinyType';\nimport { ConstructorOrAbstract } from './types';\n\n// boolean equality matcher\nexport function match<Output_Type>(_: boolean): {\n\n    when: (\n        pattern: boolean,\n        transformation: (_: boolean) => Output_Type,\n    ) => PatternMatcher<boolean, boolean, boolean, Output_Type>,\n};\n\n// number equality matcher\nexport function match<Output_Type>(_: number): {\n\n    when: (\n        pattern: number,\n        transformation: (_: number) => Output_Type,\n    ) => PatternMatcher<number, number, number, Output_Type>,\n};\n\n// number equality matcher\nexport function match<Output_Type>(_: symbol): {\n\n    when: (\n        pattern: symbol,\n        transformation: (_: symbol) => Output_Type,\n    ) => PatternMatcher<symbol, symbol, symbol, Output_Type>,\n};\n\n// string equality and regexp matcher\nexport function match<Output_Type>(_: string): {\n    when: (\n        pattern: string | RegExp,\n        transformation: (_: string) => Output_Type,\n    ) => PatternMatcher<string, string | RegExp, string, Output_Type>,\n};\n\n// Tiny Type equality matcher\nexport function match<Input_Type>(_: Input_Type): {\n    when: <Output_Type>(\n        pattern: TinyType,\n        transformation: (v: TinyType) => Output_Type,\n    ) => PatternMatcher<Input_Type, TinyType | ConstructorOrAbstract<Input_Type>, TinyType | Input_Type, Output_Type>,\n};\n\n// type matcher\nexport function match<Input_Type, Output_Type>(_: Input_Type): {\n\n    when: <MT extends Input_Type>(\n        pattern: ConstructorOrAbstract<MT>,\n        transformation: (v: MT) => Output_Type,\n    ) => PatternMatcher<Input_Type, TinyType | ConstructorOrAbstract<Input_Type>, TinyType | Input_Type, Output_Type>,\n};\n\nexport function match(value: any): PatternMatcher<any, any, any, any> {\n    switch (true) {\n        case typeof value === 'string':\n            return new StringMatcher(value as string);\n        case typeof value === 'object':\n            return new ObjectMatcher(value);\n        default:\n            return new IdentityMatcher(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/match.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "match",
    "memberof": "src/match.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/match.ts~match",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/match",
    "importStyle": "{match}",
    "description": "",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PatternMatcher"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/pattern-matching/IdentityMatcher.ts",
    "content": "import { PatternMatcher } from './PatternMatcher';\nimport { MatchesIdentical } from './rules';\n\nexport class IdentityMatcher<Input_Type, Output_Type> extends PatternMatcher<Input_Type, Input_Type, Input_Type, Output_Type> {\n\n    when(pattern: Input_Type, transformation: (v: Input_Type) => Output_Type): PatternMatcher<Input_Type, Input_Type, Input_Type, Output_Type> {\n        return new IdentityMatcher(\n            this.value,\n            this.rules.concat(new MatchesIdentical(pattern, transformation)),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/IdentityMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "IdentityMatcher",
    "memberof": "src/pattern-matching/IdentityMatcher.ts",
    "static": true,
    "longname": "src/pattern-matching/IdentityMatcher.ts~IdentityMatcher",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/IdentityMatcher",
    "importStyle": "{IdentityMatcher}",
    "description": "",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/pattern-matching/PatternMatcher.js~PatternMatcher"
    ]
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "when",
    "memberof": "src/pattern-matching/IdentityMatcher.ts~IdentityMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/IdentityMatcher.ts~IdentityMatcher#when",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PatternMatcher"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/pattern-matching/ObjectMatcher.ts",
    "content": "import { TinyType } from '../TinyType';\nimport { ConstructorOrAbstract } from '../types';\nimport { PatternMatcher } from './PatternMatcher';\nimport { MatcherRule, MatchesEqualTinyType, MatchesIdentical, MatchesObjectsWithCommonPrototype } from './rules';\n\nexport class ObjectMatcher<Input_Type, Output_Type> extends PatternMatcher<Input_Type, TinyType | ConstructorOrAbstract<Input_Type>, TinyType | Input_Type, Output_Type> {\n\n    when<MT extends Input_Type>(pattern: ConstructorOrAbstract<MT>, transformation: (v: MT) => Output_Type): ObjectMatcher<Input_Type, Output_Type>;\n    when(pattern: TinyType, transformation: (v: TinyType) => Output_Type): ObjectMatcher<Input_Type, Output_Type>;\n    when(pattern: Input_Type, transformation: (v: Input_Type) => Output_Type): ObjectMatcher<Input_Type, Output_Type>;\n    when(pattern: any, transformation: (v: any) => Output_Type) {\n        return new ObjectMatcher(\n            this.value,\n            this.rules.concat(this.rule(pattern, transformation)),\n        );\n    }\n\n    private rule(pattern: any, transformation: (v: any) => Output_Type): MatcherRule<any, Output_Type> {\n        switch (true) {\n            case pattern instanceof TinyType:\n                return new MatchesEqualTinyType<Output_Type>(pattern as TinyType, transformation);\n            case typeof pattern === 'function':\n                return new MatchesObjectsWithCommonPrototype<any, Output_Type>(pattern, transformation);\n            default:\n                return new MatchesIdentical<Input_Type, Output_Type>(pattern, transformation);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/ObjectMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "class",
    "name": "ObjectMatcher",
    "memberof": "src/pattern-matching/ObjectMatcher.ts",
    "static": true,
    "longname": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/ObjectMatcher",
    "importStyle": "{ObjectMatcher}",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/pattern-matching/PatternMatcher.js~PatternMatcher"
    ]
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "when",
    "memberof": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher#when",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "rule",
    "memberof": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/ObjectMatcher.ts~ObjectMatcher#rule",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MatcherRule"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/pattern-matching/PatternMatcher.ts",
    "content": "import { List } from '../types';\nimport { MatcherRule, MatchesAnything } from './rules';\n\nexport abstract class PatternMatcher<Input_Type, Pattern_Type, Matching_Type, Output_Type> {\n    constructor(protected readonly value: Input_Type,\n                protected readonly rules: List<MatcherRule<Input_Type, Output_Type>> = []) {\n    }\n\n    abstract when(pattern: Pattern_Type, transformation: (v: Matching_Type) => Output_Type): PatternMatcher<Input_Type, Pattern_Type, Matching_Type, Output_Type>;\n\n    else(transformation: (v: Input_Type) => Output_Type): Output_Type {\n        const matching_rule = this.rules.find(m => m.matches(this.value));\n\n        return (matching_rule || new MatchesAnything(transformation)).execute(this.value);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/PatternMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "PatternMatcher",
    "memberof": "src/pattern-matching/PatternMatcher.ts",
    "static": true,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/PatternMatcher",
    "importStyle": "{PatternMatcher}",
    "description": "",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "value",
    "memberof": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "static": false,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher#value",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "rules",
    "memberof": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "static": false,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher#rules",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "else",
    "memberof": "src/pattern-matching/PatternMatcher.ts~PatternMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/PatternMatcher.ts~PatternMatcher#else",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Output_Type"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/pattern-matching/StringMatcher.ts",
    "content": "import { PatternMatcher } from './PatternMatcher';\nimport { MatchesIdentical, MatchesRegExp } from './rules';\n\nexport class StringMatcher<Output_Type> extends PatternMatcher<string, string | RegExp, string, Output_Type> {\n\n    when(pattern: string | RegExp, transformation: (v: string) => Output_Type): PatternMatcher<string, string | RegExp, string, Output_Type> {\n        const rule = pattern instanceof RegExp\n            ? new MatchesRegExp(pattern, transformation)\n            : new MatchesIdentical(pattern, transformation);\n\n        return new StringMatcher<Output_Type>(\n            this.value,\n            this.rules.concat(rule),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/StringMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "StringMatcher",
    "memberof": "src/pattern-matching/StringMatcher.ts",
    "static": true,
    "longname": "src/pattern-matching/StringMatcher.ts~StringMatcher",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/StringMatcher",
    "importStyle": "{StringMatcher}",
    "description": "",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/pattern-matching/PatternMatcher.js~PatternMatcher"
    ]
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "when",
    "memberof": "src/pattern-matching/StringMatcher.ts~StringMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/StringMatcher.ts~StringMatcher#when",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PatternMatcher"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/pattern-matching/index.ts",
    "content": "export * from './IdentityMatcher';\nexport * from './ObjectMatcher';\nexport * from './PatternMatcher';\nexport * from './StringMatcher';\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatcherRule.ts",
    "content": "export abstract class MatcherRule<Input_Type, Output_Type>{\n    constructor(\n        private readonly transformation: (v: Input_Type) => Output_Type,\n    ) {\n    }\n\n    abstract matches(value: Input_Type): boolean;\n\n    execute(value: Input_Type): Output_Type {\n        return this.transformation(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/rules/MatcherRule.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "MatcherRule",
    "memberof": "src/pattern-matching/rules/MatcherRule.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatcherRule",
    "importStyle": "{MatcherRule}",
    "description": "",
    "lineNumber": 1,
    "interface": false
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "transformation",
    "memberof": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule",
    "static": false,
    "longname": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule#transformation",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "execute",
    "memberof": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatcherRule.ts~MatcherRule#execute",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Output_Type"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesAnything.ts",
    "content": "import { MatcherRule } from './MatcherRule';\n\nexport class MatchesAnything<Input_Type, Output_Type> extends MatcherRule<Input_Type, Output_Type> {\n    constructor(transformation: (v: Input_Type) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(_: Input_Type): boolean {\n        return true;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/rules/MatchesAnything.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "MatchesAnything",
    "memberof": "src/pattern-matching/rules/MatchesAnything.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesAnything",
    "importStyle": "{MatchesAnything}",
    "description": "",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesAnything.ts~MatchesAnything#matches",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "_",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesEqualTinyType.ts",
    "content": "import { TinyType } from '../../TinyType';\nimport { MatcherRule } from './MatcherRule';\n\nexport class MatchesEqualTinyType<Output_Type> extends MatcherRule<TinyType, Output_Type> {\n    constructor(private readonly pattern: TinyType, transformation: (v: TinyType) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(value: TinyType): boolean {\n        return this.pattern.equals(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/rules/MatchesEqualTinyType.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "MatchesEqualTinyType",
    "memberof": "src/pattern-matching/rules/MatchesEqualTinyType.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesEqualTinyType",
    "importStyle": "{MatchesEqualTinyType}",
    "description": "",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ]
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType",
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesEqualTinyType.ts~MatchesEqualTinyType#matches",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "TinyType"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesIdentical.ts",
    "content": "import { MatcherRule } from './MatcherRule';\n\nexport class MatchesIdentical<Input_Type, Output_Type> extends MatcherRule<Input_Type, Output_Type> {\n    constructor(private readonly pattern: Input_Type, transformation: (v: Input_Type) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(value: Input_Type): boolean {\n        return value === this.pattern;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/rules/MatchesIdentical.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "MatchesIdentical",
    "memberof": "src/pattern-matching/rules/MatchesIdentical.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesIdentical",
    "importStyle": "{MatchesIdentical}",
    "description": "",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ]
  },
  {
    "__docId__": 91,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical",
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesIdentical.ts~MatchesIdentical#matches",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts",
    "content": "import { ConstructorOrAbstract } from '../../types';\nimport { MatcherRule } from './MatcherRule';\n\nexport class MatchesObjectsWithCommonPrototype<Input_Type, Output_Type> extends MatcherRule<Input_Type, Output_Type> {\n    constructor(private readonly pattern: ConstructorOrAbstract<Input_Type>, transformation: (v: Input_Type) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(value: Input_Type): boolean {\n        return value instanceof this.pattern;\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "MatchesObjectsWithCommonPrototype",
    "memberof": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesObjectsWithCommonPrototype",
    "importStyle": "{MatchesObjectsWithCommonPrototype}",
    "description": "",
    "lineNumber": 4,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ]
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype",
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesObjectsWithCommonPrototype.ts~MatchesObjectsWithCommonPrototype#matches",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Input_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/pattern-matching/rules/MatchesRegExp.ts",
    "content": "import { MatcherRule } from './MatcherRule';\n\nexport class MatchesRegExp<Output_Type> extends MatcherRule<string, Output_Type> {\n    constructor(private readonly pattern: RegExp, transformation: (v: string) => Output_Type) {\n        super(transformation);\n    }\n\n    matches(value: string): boolean {\n        return this.pattern.test(value);\n    }\n}\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/rules/MatchesRegExp.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "MatchesRegExp",
    "memberof": "src/pattern-matching/rules/MatchesRegExp.ts",
    "static": true,
    "longname": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp",
    "access": "public",
    "export": true,
    "importPath": "tiny-types/lib/pattern-matching/rules/MatchesRegExp",
    "importStyle": "{MatchesRegExp}",
    "description": "",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/pattern-matching/rules/MatcherRule.js~MatcherRule"
    ]
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp",
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "matches",
    "memberof": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pattern-matching/rules/MatchesRegExp.ts~MatchesRegExp#matches",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/pattern-matching/rules/index.ts",
    "content": "export * from './MatcherRule';\nexport * from './MatchesAnything';\nexport * from './MatchesEqualTinyType';\nexport * from './MatchesIdentical';\nexport * from './MatchesObjectsWithCommonPrototype';\nexport * from './MatchesRegExp';\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/pattern-matching/rules/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/types.ts",
    "content": "export type List<T> = T[];\nexport type ConstructorOrAbstract<T = {}> = Function & { prototype: T };  // tslint:disable-line:ban-types\n\nexport type JSONPrimitive = string | number | boolean | null;\nexport interface JSONObject {\n    [_: string]: JSONPrimitive | JSONObject | JSONArray;\n}\nexport interface JSONArray extends Array<JSONValue> {}                         // tslint:disable-line:no-empty-interface\nexport type JSONValue = JSONPrimitive | JSONObject | JSONArray;\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/src/types.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Tiny Types\n\n[![npm version](https://badge.fury.io/js/tiny-types.svg)](https://badge.fury.io/js/tiny-types)\n[![Build Status](https://travis-ci.org/jan-molak/tiny-types.svg?branch=master)](https://travis-ci.org/jan-molak/tiny-types)\n[![Coverage Status](https://coveralls.io/repos/github/jan-molak/tiny-types/badge.svg?branch=master)](https://coveralls.io/github/jan-molak/tiny-types?branch=master)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n[![npm](https://img.shields.io/npm/dm/tiny-types.svg)](https://npm-stat.com/charts.html?package=tiny-types)\n[![Known Vulnerabilities](https://snyk.io/test/github/jan-molak/tiny-types/badge.svg)](https://snyk.io/test/github/jan-molak/tiny-types)\n\nTinyTypes is an [npm module](https://www.npmjs.com/package/tiny-types) that makes it easy for TypeScript and JavaScript\nprojects to give domain meaning to primitive types. It also helps to avoid all sorts of bugs \nand makes your code easier to refactor. [Learn more.](https://janmolak.com/tiny-types-in-typescript-4680177f026e)\n\n## Installation\n\nTo install the module from npm:\n\n```\nnpm install --save tiny-types\n```\n\n## Defining Tiny Types\n\n> An int on its own is just a scalar with no meaning. With an object, even a small one, you are giving both the compiler \nand the programmer additional information  about what the value is and why it is being used.\n>\n> &dash; [Jeff Bay, Object Calisthenics](http://www.xpteam.com/jeff/writings/objectcalisthenics.rtf)\n\n### Single-value types\n\nTo define a single-value `TinyType` - extend from `TinyTypeOf<T>()`:\n\n```typescript\nimport { TinyTypeOf } from 'tiny-types';\n\nclass FirstName extends TinyTypeOf<string>() {}\nclass LastName  extends TinyTypeOf<string>() {}\nclass Age       extends TinyTypeOf<number>() {}\n```\n \nEvery tiny type defined this way has\na [readonly property](https://www.typescriptlang.org/docs/handbook/classes.html#readonly-modifier)\n`value` of type `T`, which you can use to access the wrapped primitive value. For example:\n\n```typescript\nconst firstName = new FirstName('Jan');\n\nfirstName.value === 'Jan';\n```\n\n#### Equals\n\nEach tiny type object has an `equals` method, which you can use to compare it by value:\n\n```typescript\nconst \n    name1 = new FirstName('Jan'),\n    name2 = new FirstName('Jan');\n\nname1.equals(name2) === true; \n```\n\n#### ToString\n\nAn additional feature of tiny types is a built-in `toString()` method:\n\n```typescript\nconst name = new FirstName('Jan');\n\nname.toString() === 'FirstName(value=Jan)';\n```\n\nWhich you can override if you want to:\n\n```typescript\nclass Timestamp extends TinyTypeOf<Date>() {\n    toString() {\n        return `Timestamp(value=${this.value.toISOString()})`;\n    }\n}\n\nconst timestamp = new Timestamp(new Date());\n\ntimestampt.toString() === 'Timestamp(value=2018-03-12T00:30:00.000Z))'\n```\n\n### Multi-value and complex types\n\nIf the tiny type you want to model has more than one value,\nor you want to perform additional operations in the constructor,\nextend from `TinyType` directly:\n\n```typescript\nimport { TinyType } from 'tiny-types';\n\nclass Person extends TinyType {\n    constructor(public readonly firstName: FirstName,\n                public readonly lastName: LastName,\n    ) {\n        super();\n    }\n}\n\n```\n\nYou can also mix and match both of the above definition styles:\n\n```typescript\nimport { TinyType, TinyTypeOf } from 'tiny-types';\n\nclass UserName extends TinyTypeOf<string>() {}\n\nclass Timestamp extends TinyTypeOf<Date>() {\n    toString() {\n        return `Timestamp(value=${this.value.toISOString()})`;\n    }\n}\n\nabstract class DomainEvent extends TinyTypeOf<Timestamp>() {}\n\nclass AccountCreated extends DomainEvent {\n    constructor(public readonly username: UserName, timestamp: Timestamp) {\n        super(timestamp);\n    }\n}\n\nconst event = new AccountCreated(new UserName('jan-molak'), new Timestamp(new Date()));\n```\n\nEven such complex types still have both the `equals` and `toString` methods:\n\n```typescript \nconst \n    now = new Date(2018, 2, 12, 0, 30),\n    event1 = new AccountCreated(new UserName('jan-molak'), new Timestamp(now)),\n    event2 = new AccountCreated(new UserName('jan-molak'), new Timestamp(now));\n    \nevent1.equals(event2) === true;\n\nevent1.toString() === 'AccountCreated(username=UserName(value=jan-molak), value=Timestamp(value=2018-03-12T00:30:00.000Z))'\n``` \n\n## Serialisation to JSON\n\nEvery TinyType defines \na [`toJSON()` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior), \nwhich returns a JSON representation of the object. This means that you can use TinyTypes \nas [Data Transfer Objects](https://en.wikipedia.org/wiki/Data_transfer_object).\n\nSingle-value TinyTypes are serialised to the value itself:\n\n```typescript\nimport { TinyTypeOf } from 'tiny-types';\n\nclass FirstName extends TinyTypeOf<string>() {}\n\nconst firstName = new FirstName('Jan');\n\nfirstName.toJSON() === 'Jan'\n```\n\nComplex TinyTypes are serialised recursively:\n\n```typescript\nimport { TinyType, TinyTypeOf } from 'tiny-types';\n\nclass FirstName extends TinyTypeOf<string>() {}\nclass LastName extends TinyTypeOf<string>() {}\nclass Age extends TinyTypeOf<number>() {}\nclass Person extends TinyType {\n    constructor(\n        public readonly firstName: FirstName,\n        public readonly lastName: LastName,\n        public readonly age: Age,\n    ) {\n        super();\n    }\n}\n\nconst person = new Person(new FirstName('Bruce'), new LastName('Smith'), new Age(55));\n\nperson.toJSON() === { firstName: 'Bruce', lastName: 'Smith', age: 55 }\n```\n\n## De-serialisation from JSON\n\nAlthough you could define standalone de-serialisers, I like to define them \nas [static factory methods](https://en.wikipedia.org/wiki/Factory_method_pattern) on the TinyTypes themselves:\n\n```typescript\nimport { TinyTypeOf } from 'tiny-types';\n\nclass FirstName extends TinyTypeOf<string>() {\n    static fromJSON = (v: string) => new FirstName(v);\n}\n\nconst firstName = new FirstName('Jan'),\n\nFirstName.fromJSON(firstName.toJSON()).equals(firstName) === true\n```\n\nOptionally, you could take this further and define the shape of serialised objects\nto ensure that `fromJSON` and `toJSON` are compatible:\n\n```typescript\nimport { TinyTypeOf } from 'tiny-types';\n\ntype SerialisedFirstName = string;\nclass FirstName extends TinyTypeOf<string>() {\n    static fromJSON = (v: SerialisedFirstName) => new FirstName(v);\n    toJSON(): SerialisedFirstName {\n        return super.toJSON() as SerialisedFirstName;\n    }\n}\n\nconst firstName = new FirstName('Jan'),\n\nFirstName.fromJSON(firstName.toJSON()).equals(firstName) === true\n```\n\nThis way de-serialising a more complex TinyType becomes trivial:\n\n```typescript\nimport { JSONObject, TinyType } from 'tiny-types';\n\ninterface SerialisedPerson extends JSONObject {\n    firstName:  SerialisedFirstName;\n    lastName:   SerialisedLastName;\n    age:        SerialisedAge;\n}\n\nclass Person extends TinyType {\n    static fromJSON = (v: SerialisedPerson) => new Person(\n        FirstName.fromJSON(v.firstName),\n        LastName.fromJSON(v.lastName),\n        Age.fromJSON(v.age),\n    )\n\n    constructor(public readonly firstName: FirstName,\n                public readonly lastName: LastName,\n                public readonly age: Age,\n    ) {\n        super();\n    }\n\n    toJSON(): SerialisedPerson {\n        return super.toJSON() as SerialisedPerson;\n    }\n}\n``` \n\n## Your feedback matters!\n\nDo you find TinyTypes useful? [Give it a star!](https://github.com/jan-molak/tiny-types) &#9733;\n\nFound a bug? Need a feature? Raise [an issue](https://github.com/jan-molak/tiny-types/issues?state=open)\nor submit a pull request.\n\nHave feedback? Let me know on twitter: [@JanMolak](https://twitter.com/JanMolak)\n\n## License\n\nTinyTypes library is licensed under the [Apache-2.0](LICENSE.md) license.\n\n----\n\n_- Copyright &copy; 2018- [Jan Molak](https://janmolak.com)_\n",
    "longname": "/home/travis/build/jan-molak/tiny-types/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"tiny-types\",\n  \"version\": \"0.0.0-development\",\n  \"description\": \"A tiny library that brings Tiny Types to JavaScript and TypeScript\",\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"scripts\": {\n    \"clean\": \"rimraf docs lib reports\",\n    \"lint\": \"tslint --project tsconfig.json --config tslint.json --format stylish\",\n    \"test\": \"nyc --report-dir ./reports/coverage mocha --opts ./mocha.opts 'spec/**/*.spec.*'\",\n    \"package\": \"tsc --project tsconfig.json\",\n    \"verify\": \"npm run clean && npm run lint && npm test && npm run package\",\n    \"doc\": \"esdoc\",\n    \"publish:reports\": \"nyc report --reporter=text-lcov | coveralls\",\n    \"publish:site\": \"gh-pages --silent --repo https://$GH_TOKEN@github.com/jan-molak/tiny-types.git -d docs\",\n    \"commit\": \"git-cz\",\n    \"semantic-release\": \"semantic-release\",\n    \"travis-deploy-once\": \"travis-deploy-once\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jan-molak/tiny-types.git\"\n  },\n  \"keywords\": [\n    \"design\",\n    \"patterns\",\n    \"value\",\n    \"objects\",\n    \"tiny\",\n    \"types\",\n    \"ddd\",\n    \"domain-driven\",\n    \"design\"\n  ],\n  \"author\": \"Jan Molak <jan.molak@smartcodeltd.co.uk>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jan-molak/tiny-types/issues\"\n  },\n  \"homepage\": \"https://github.com/jan-molak/tiny-types#readme\",\n  \"devDependencies\": {\n    \"@types/chai\": \"4.1.2\",\n    \"@types/mocha\": \"2.2.48\",\n    \"@types/node\": \"9.4.0\",\n    \"chai\": \"4.1.2\",\n    \"cheerio\": \"1.0.0-rc.2\",\n    \"commitizen\": \"2.9.6\",\n    \"coveralls\": \"3.0.0\",\n    \"cz-conventional-changelog\": \"^2.1.0\",\n    \"esdoc\": \"1.0.4\",\n    \"esdoc-importpath-plugin\": \"1.0.1\",\n    \"esdoc-standard-plugin\": \"1.0.0\",\n    \"esdoc-typescript-plugin\": \"1.0.0\",\n    \"gh-pages\": \"1.1.0\",\n    \"mocha\": \"5.0.0\",\n    \"mocha-testdata\": \"1.2.0\",\n    \"nyc\": \"11.4.1\",\n    \"rimraf\": \"2.6.2\",\n    \"semantic-release\": \"^12.4.1\",\n    \"semantic-release-cli\": \"3.6.2\",\n    \"travis-deploy-once\": \"^4.3.3\",\n    \"ts-node\": \"4.1.0\",\n    \"tslint\": \"5.9.1\",\n    \"tslint-microsoft-contrib\": \"5.0.2\",\n    \"typescript\": \"2.7.1\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/*.ts\",\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"lib\",\n      \"node_modules\",\n      \"spec\",\n      \"src/types.ts\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"json\",\n      \"text-summary\",\n      \"html\"\n    ],\n    \"cache\": true,\n    \"all\": true\n  }\n}\n",
    "longname": "/home/travis/build/jan-molak/tiny-types/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 106,
    "kind": "testFile",
    "name": "spec/TinyType.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\nimport { JSONObject, JSONPrimitive, TinyType, TinyTypeOf } from '../src';\nimport { expect } from './expect';\n\n/** @test {TinyType} */\ndescribe('TinyType', () => {\n\n    describe('definition', () => {\n\n        /** @test {TinyTypeOf} */\n        it('can be a one-liner for TinyTypes representing a single value', () => {\n            class FirstName extends TinyTypeOf<string>() {}\n\n            const firstName = new FirstName('Jan');\n\n            expect(firstName.value).to.equal('Jan');\n            expect(firstName).to.be.instanceOf(FirstName);\n            expect(firstName).to.be.instanceOf(TinyType);\n            expect(firstName.constructor.name).to.equal('FirstName');\n            expect(firstName.toString()).to.equal('FirstName(value=Jan)');\n        });\n\n        /**\n         * @test {TinyType}\n         * @test {TinyTypeOf}\n         */\n        it('needs to extend the TinyType for types with more than one value', () => {\n            class FirstName extends TinyTypeOf<string>() {}\n            class LastName extends TinyTypeOf<string>() {}\n\n            class FullName extends TinyType {\n                constructor(public readonly firstName: FirstName,\n                            public readonly lastName: LastName) {\n                    super();\n                }\n            }\n\n            const fullName = new FullName(new FirstName('Jan'), new LastName('Molak'));\n\n            expect(fullName.firstName.value).to.equal('Jan');\n            expect(fullName.lastName.value).to.equal('Molak');\n            expect(fullName).to.be.instanceOf(FullName);\n            expect(fullName).to.be.instanceOf(FullName);\n            expect(fullName.constructor.name).to.equal('FullName');\n            expect(fullName.toString()).to.equal('FullName(firstName=FirstName(value=Jan), lastName=LastName(value=Molak))');\n        });\n\n        /**\n         * @test {TinyType}\n         * @test {TinyTypeOf}\n         */\n        it('can be mixed and matched', () => {\n            const now = new Date(Date.UTC(2018, 2, 12, 0, 30, 0));\n\n            class UserName extends TinyTypeOf<string>() {}\n            class Timestamp extends TinyTypeOf<Date>() {\n                toString() {\n                    return `Timestamp(value=${this.value.toISOString()})`;\n                }\n            }\n\n            abstract class DomainEvent extends TinyTypeOf<Timestamp>() {}\n\n            class AccountCreated extends DomainEvent {\n                constructor(public readonly username: UserName, timestamp: Timestamp) {\n                    super(timestamp);\n                }\n            }\n\n            const e = new AccountCreated(new UserName('jan-molak'), new Timestamp(now));\n\n            expect(e.toString()).to.equal(\n                'AccountCreated(username=UserName(value=jan-molak), value=Timestamp(value=2018-03-12T00:30:00.000Z))',\n            );\n        });\n    });\n\n    /** @test {TinyType#equals} */\n    describe('::equals', () => {\n        class Name extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n            }\n        }\n\n        class Role extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n            }\n        }\n\n        class Person extends TinyType {\n            constructor(public readonly name: Name, public readonly role: Role) { super(); }\n        }\n\n        it('is reflexive', () => {\n\n            const n1 = new Name('Jan');\n\n            expect(n1.equals(n1)).to.be.true;                               // tslint:disable-line:no-unused-expression\n        });\n\n        it('is symmetric', () => {\n\n            const\n                n1 = new Name('Jan'),\n                n2 = new Name('Jan');\n\n            expect(n1.equals(n2)).to.be.true;                               // tslint:disable-line:no-unused-expression\n            expect(n1.equals(n2)).to.equal(n2.equals(n1));\n        });\n\n        it('is transitive', () => {\n\n            const\n                n1 = new Name('Jan'),\n                n2 = new Name('Jan'),\n                n3 = new Name('Jan');\n\n            expect(n1.equals(n2)).to.be.true;                               // tslint:disable-line:no-unused-expression\n            expect(n2.equals(n3)).to.be.true;                               // tslint:disable-line:no-unused-expression\n            expect(n1.equals(n3)).to.be.true;                               // tslint:disable-line:no-unused-expression\n        });\n\n        it('is recursive', () => {\n\n            const\n                p1 = new Person(new Name('Jan'), new Role('dev')),\n                p2 = new Person(new Name('Jan'), new Role('dev')),\n                p3 = new Person(new Name('John'), new Role('dev'));\n\n            expect(p1.equals(p2)).to.be.true;                               // tslint:disable-line:no-unused-expression\n            expect(p1.equals(p3)).to.be.false;                              // tslint:disable-line:no-unused-expression\n        });\n\n        it('works for private fields', () => {\n            class PrivatePerson extends TinyType {\n                constructor(private readonly name: Name, public readonly role: Role) { super(); }\n            }\n\n            const\n                p1 = new PrivatePerson(new Name('Jan'), new Role('dev')),\n                p2 = new PrivatePerson(new Name('Jan'), new Role('dev')),\n                p3 = new PrivatePerson(new Name('John'), new Role('dev'));\n\n            expect(p1.equals(p2)).to.be.true;                               // tslint:disable-line:no-unused-expression\n            expect(p1.equals(p3)).to.be.false;                              // tslint:disable-line:no-unused-expression\n        });\n\n        given(\n            undefined,\n            null,\n            {},\n            [],\n            1,\n            '',\n            false,\n        ).it('is false for objects of a different type', (another: any) => {\n            const n = new Name('Jan');\n\n            expect(n.equals(another)).to.be.false;                          // tslint:disable-line:no-unused-expression\n        });\n    });\n\n    /** @test {TinyType#toString} */\n    describe('::toString', () => {\n        class Area      extends TinyTypeOf<string>() {}\n        class District  extends TinyTypeOf<number>() {}\n        class Sector    extends TinyTypeOf<number>() {}\n        class Unit      extends TinyTypeOf<string>() {}\n\n        class Postcode extends TinyType {\n            constructor(public readonly area: Area,\n                        public readonly district: District,\n                        public readonly sector: Sector,\n                        public readonly unit: Unit,\n            ) {\n                super();\n            }\n        }\n\n        it('mentions the class and its properties', () => {\n            const area = new Area('GU');\n\n            expect(area.toString()).to.equal('Area(value=GU)');\n        });\n\n        it('mentions the class and its fields, but not the methods', () => {\n            class Person extends TinyType {\n                constructor(public readonly name: string) {\n                    super();\n                }\n                rename = (newName: string) => new Person(newName);\n            }\n\n            const p = new Person('James');\n\n            expect(p.toString())\n                .to.equal('Person(name=James)');\n        });\n\n        it('only cares about the fields, not the methods', () => {\n            const postcode = new Postcode(\n                new Area('GU'),\n                new District(15),\n                new Sector(9),\n                new Unit('NZ'),\n            );\n\n            expect(postcode.toString())\n                .to.equal('Postcode(area=Area(value=GU), district=District(value=15), sector=Sector(value=9), unit=Unit(value=NZ))');\n        });\n    });\n\n    /** @test {TinyType#toJSON} */\n    describe('serialisation', () => {\n\n        class FirstName extends TinyTypeOf<string>() {}\n        class LastName extends TinyTypeOf<string>() {}\n        class Age extends TinyTypeOf<number>() {}\n        class Person extends TinyType {\n            constructor(\n                public readonly firstName: FirstName,\n                public readonly lastName: LastName,\n                public readonly age: Age,\n            ) {\n                super();\n            }\n        }\n\n        describe('::toJSON', () => {\n\n            given<TinyType & { value: any }>(\n                new FirstName('Bruce'),\n                new Age(55),\n            ).\n            it('should serialise a single-value TinyType to just its value', input => {\n               expect(input.toJSON()).to.equal(input.value);\n            });\n\n            it('should serialise a complex TinyType recursively', () => {\n\n                const person = new Person(new FirstName('Bruce'), new LastName('Smith'), new Age(55));\n\n                expect(person.toJSON()).to.deep.equal({\n                    firstName: 'Bruce',\n                    lastName: 'Smith',\n                    age: 55,\n                });\n            });\n\n            it(`should JSON.stringify any object that can't be represented in a more sensible way`, () => {\n                class TT extends TinyTypeOf<object>() {}\n\n                const tt = new TT(new Object({ key: 'value' }));\n\n                expect(tt.toJSON()).to.equal('{\"key\":\"value\"}');\n            });\n        });\n    });\n\n    /** @test {TinyType} */\n    describe('de-serialisation', () => {\n\n        type SerialisedFirstName = string & JSONPrimitive;\n        class FirstName extends TinyTypeOf<string>() {\n            static fromJSON = (v: SerialisedFirstName) => new FirstName(v);\n            toJSON(): SerialisedFirstName {\n                return super.toJSON() as SerialisedFirstName;\n            }\n        }\n\n        type SerialisedLastName = string & JSONPrimitive;\n        class LastName extends TinyTypeOf<string>() {\n            static fromJSON = (v: SerialisedLastName) => new LastName(v);\n            toJSON(): SerialisedLastName {\n                return super.toJSON() as SerialisedLastName;\n            }\n        }\n\n        type SerialisedAge = number & JSONPrimitive;\n        class Age extends TinyTypeOf<number>() {\n            static fromJSON = (v: SerialisedAge) => new Age(v);\n            toJSON(): SerialisedAge {\n                return super.toJSON() as SerialisedAge;\n            }\n        }\n\n        interface SerialisedPerson extends JSONObject {\n            firstName: SerialisedFirstName;\n            lastName: SerialisedLastName;\n            age: SerialisedAge;\n        }\n        class Person extends TinyType {\n            static fromJSON = (v: SerialisedPerson) => new Person(\n                FirstName.fromJSON(v.firstName),\n                LastName.fromJSON(v.lastName),\n                Age.fromJSON(v.age),\n            )\n\n            constructor(public readonly firstName: FirstName,\n                        public readonly lastName: LastName,\n                        public readonly age: Age,\n            ) {\n                super();\n            }\n\n            toJSON(): SerialisedPerson {\n                return super.toJSON() as SerialisedPerson;\n            }\n        }\n\n        it('custom fromJSON can de-serialise a serialised single-value TinyType', () => {\n            const firstName = new FirstName('Jan');\n\n            // tslint:disable-next-line:no-unused-expression\n            expect(FirstName.fromJSON(firstName.toJSON()).equals(firstName)).to.be.true;\n        });\n\n        it('custom fromJSON can recursively de-serialise a serialised complex TinyType', () => {\n            const person = new Person(new FirstName('Bruce'), new LastName('Smith'), new Age(55));\n\n            // tslint:disable-next-line:no-unused-expression\n            expect(Person.fromJSON(person.toJSON()).equals(person)).to.be.true;\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/spec/TinyType.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/TinyType.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0",
    "access": null,
    "description": "TinyType",
    "lineNumber": 6,
    "testTargets": [
      "TinyType"
    ]
  },
  {
    "__docId__": 108,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/TinyType.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1",
    "access": null,
    "description": "definition",
    "lineNumber": 7
  },
  {
    "__docId__": 109,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.it2",
    "access": null,
    "description": "can be a one-liner for TinyTypes representing a single value",
    "lineNumber": 9,
    "testTargets": [
      "TinyTypeOf"
    ]
  },
  {
    "__docId__": 110,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.it3",
    "access": null,
    "description": "needs to extend the TinyType for types with more than one value",
    "lineNumber": 29,
    "testTargets": [
      "TinyType",
      "TinyTypeOf"
    ]
  },
  {
    "__docId__": 111,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/TinyType.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe1.it4",
    "access": null,
    "description": "can be mixed and matched",
    "lineNumber": 71,
    "testTargets": [
      "TinyType",
      "TinyTypeOf"
    ]
  },
  {
    "__docId__": 112,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "spec/TinyType.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe5",
    "access": null,
    "description": "::equals",
    "lineNumber": 123,
    "testTargets": [
      "TinyType#equals"
    ]
  },
  {
    "__docId__": 113,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/TinyType.spec.ts~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe5.it6",
    "access": null,
    "description": "is reflexive",
    "lineNumber": 161
  },
  {
    "__docId__": 114,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/TinyType.spec.ts~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe5.it7",
    "access": null,
    "description": "is symmetric",
    "lineNumber": 165
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/TinyType.spec.ts~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe5.it8",
    "access": null,
    "description": "is transitive",
    "lineNumber": 170
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "spec/TinyType.spec.ts~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe5.it9",
    "access": null,
    "description": "is recursive",
    "lineNumber": 176
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/TinyType.spec.ts~describe0.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe5.it10",
    "access": null,
    "description": "works for private fields",
    "lineNumber": 181
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "spec/TinyType.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe11",
    "access": null,
    "description": "::toString",
    "lineNumber": 205,
    "testTargets": [
      "TinyType#toString"
    ]
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/TinyType.spec.ts~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe11.it12",
    "access": null,
    "description": "mentions the class and its properties",
    "lineNumber": 253
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "spec/TinyType.spec.ts~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe11.it13",
    "access": null,
    "description": "mentions the class and its fields, but not the methods",
    "lineNumber": 257
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "spec/TinyType.spec.ts~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe11.it14",
    "access": null,
    "description": "only cares about the fields, not the methods",
    "lineNumber": 281
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "spec/TinyType.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe15",
    "access": null,
    "description": "serialisation",
    "lineNumber": 288,
    "testTargets": [
      "TinyType#toJSON"
    ]
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "spec/TinyType.spec.ts~describe0.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe15.describe16",
    "access": null,
    "description": "::toJSON",
    "lineNumber": 327
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/TinyType.spec.ts~describe0.describe15.describe16",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe15.describe16.it17",
    "access": null,
    "description": "should serialise a complex TinyType recursively",
    "lineNumber": 332
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "spec/TinyType.spec.ts~describe0.describe15.describe16",
    "testDepth": 3,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe15.describe16.it18",
    "access": null,
    "lineNumber": 340
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "spec/TinyType.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe19",
    "access": null,
    "description": "de-serialisation",
    "lineNumber": 355,
    "testTargets": [
      "TinyType"
    ]
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/TinyType.spec.ts~describe0.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe19.it20",
    "access": null,
    "description": "custom fromJSON can de-serialise a serialised single-value TinyType",
    "lineNumber": 466
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "spec/TinyType.spec.ts~describe0.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "spec/TinyType.spec.ts~describe0.describe19.it21",
    "access": null,
    "description": "custom fromJSON can recursively de-serialise a serialised complex TinyType",
    "lineNumber": 471
  },
  {
    "__docId__": 129,
    "kind": "testFile",
    "name": "spec/json.spec.ts",
    "content": "import 'mocha';\nimport { JSONArray, JSONObject, JSONPrimitive, JSONValue } from '../src/types';\n\ndescribe('JSON', () => {\n\n    const\n        Some_String: string = 'string',\n        Some_Number: number = 1,\n        Some_Boolean: boolean = false,\n        Some_Object = {k1: Some_String, k2: Some_Number},\n        Some_Array = [Some_String, Some_Number, Some_Boolean, Some_Object];\n\n    describe('JSONArray', () => {\n        it(`describes an array that's a valid JSON`, () => {\n            const array: JSONArray = Some_Array;\n        });\n    });\n\n    describe('JSONObject', () => {\n        it(`describes a JavaScript object serialised to JSON`, () => {\n            const object: JSONObject = {\n                string: Some_String,\n                number: Some_Number,\n                boolean: Some_Boolean,\n                object: Some_Object,\n                array: Some_Array,\n            };\n        });\n    });\n\n    describe('JSONPrimitive', () => {\n        it(`describes any primitive that can be part of JSON`, () => {\n            const s: JSONPrimitive = 'string',\n                n: JSONPrimitive = 42,\n                b: JSONPrimitive = false,\n                e: JSONPrimitive = null;\n        });\n    });\n\n    describe('JSONValue', () => {\n        it('describes any value that can be represented as JSON', () => {\n            const\n                ss: JSONValue = Some_String,\n                sn: JSONValue = Some_Number,\n                sb: JSONValue = Some_Boolean,\n                so: JSONValue = Some_Object,\n                sa: JSONValue = Some_Array;\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/spec/json.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "spec/json.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/json.spec.ts~describe22",
    "access": null,
    "description": "JSON",
    "lineNumber": 2
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "spec/json.spec.ts~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "spec/json.spec.ts~describe22.describe23",
    "access": null,
    "description": "JSONArray",
    "lineNumber": 4
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/json.spec.ts~describe22.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "spec/json.spec.ts~describe22.describe23.it24",
    "access": null,
    "lineNumber": 5
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "spec/json.spec.ts~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "spec/json.spec.ts~describe22.describe25",
    "access": null,
    "description": "JSONObject",
    "lineNumber": 9
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "spec/json.spec.ts~describe22.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "spec/json.spec.ts~describe22.describe25.it26",
    "access": null,
    "lineNumber": 10
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "spec/json.spec.ts~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "spec/json.spec.ts~describe22.describe27",
    "access": null,
    "description": "JSONPrimitive",
    "lineNumber": 20
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/json.spec.ts~describe22.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "spec/json.spec.ts~describe22.describe27.it28",
    "access": null,
    "lineNumber": 21
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "spec/json.spec.ts~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "spec/json.spec.ts~describe22.describe29",
    "access": null,
    "description": "JSONValue",
    "lineNumber": 25
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/json.spec.ts~describe22.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "spec/json.spec.ts~describe22.describe29.it30",
    "access": null,
    "description": "describes any value that can be represented as JSON",
    "lineNumber": 26
  },
  {
    "__docId__": 139,
    "kind": "testFile",
    "name": "spec/match.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\nimport { match, TinyType } from '../src';\nimport { IdentityMatcher, ObjectMatcher, StringMatcher } from '../src/pattern-matching';\nimport { expect } from './expect';\n\ndescribe(`match`, () => {\n\n    abstract class DomainEvent {\n        constructor(public readonly timestamp: Date = new Date()) {\n        }\n    }\n\n    class ConcreteEvent extends DomainEvent {\n    }\n\n    class EmaiAddress extends TinyType {\n        constructor(public readonly value: string) {\n            super();\n        }\n    }\n\n    given([\n        { input: 5,                                     pattern: 1,                                     expected_matcher: IdentityMatcher },\n        { input: Symbol('some'),                        pattern: Symbol('other'),                       expected_matcher: IdentityMatcher },\n        { input: 'hello',                               pattern: 'hello',                               expected_matcher: StringMatcher },\n        { input: 'hello',                               pattern: /^[Hh]ello/,                           expected_matcher: StringMatcher },\n        { input: new EmaiAddress('user@domain.org'),    pattern: new EmaiAddress('user@domain.org'),    expected_matcher: ObjectMatcher },\n        { input: new ConcreteEvent(),                   pattern: ConcreteEvent,                         expected_matcher: ObjectMatcher },\n        { input: new ConcreteEvent(),                   pattern: DomainEvent,                           expected_matcher: ObjectMatcher },\n    ]).\n    it(`uses a matcher appropriate to the input`, ({input, pattern, expected_matcher}) => {\n        expect(match(input).when(pattern, _ => _)).to.be.instanceOf(expected_matcher);\n    });\n\n    it(`uses the default rule if a more specific one has not been defined`, () => {\n        const result = match('four')\n            .when('five', _ => `high five`)\n            .when('six', _ => `got your six`)\n            .else(n => `got ${n}`);\n\n        expect(result).to.equal('got four');\n    });\n\n    it(`uses the default rule if a more specific one has not been defined`, () => {\n        const result = match(4)\n            .when(5, _ => `high five`)\n            .when(6, _ => `got your six`)\n            .else(n => `got ${n}`);\n\n        expect(result).to.equal('got 4');\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/spec/match.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "spec/match.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/match.spec.ts~describe31",
    "access": null,
    "lineNumber": 6
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "spec/match.spec.ts~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "spec/match.spec.ts~describe31.it32",
    "access": null,
    "lineNumber": 50
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/match.spec.ts~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "spec/match.spec.ts~describe31.it33",
    "access": null,
    "lineNumber": 57
  },
  {
    "__docId__": 143,
    "kind": "testFile",
    "name": "spec/pattern-matching/IdentityMatcher.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\nimport { IdentityMatcher } from '../../src/pattern-matching';\nimport { expect } from '../expect';\n\ndescribe('IdentityMatcher', () => {\n    given(\n        [true, 'received \"true\"'],\n        [false, 'received \"false\"'],\n    ).it('matches a boolean', (input: boolean, expected_result: string) => {\n\n        const result = new IdentityMatcher(input)\n            .when(true, _ => `received \"true\"`)\n            .else(_ => `received \"false\"`);\n\n        expect(result).to.equal(expected_result);\n    });\n\n    given(\n        [-1, 'received \"-1\"'],\n        [0.1, 'received \"0.1\"'],\n        [5, 'else, received \"5\"'],\n        // [NaN, 'received \"NaN\"'],\n        [Infinity, 'to infinity and beyond!'],\n    ).it('matches a number', (input: number, expected_result: string) => {\n\n        const result = new IdentityMatcher(input)\n            .when(-1, _ => `received \"-1\"`)\n            .when(0.1, _ => `received \"0.1\"`)\n            .when(Infinity, _ => `to infinity and beyond!`)\n            .else(_ => `else, received \"${_}\"`);\n\n        expect(result).to.equal(expected_result);\n    });\n\n    it('matches a symbol', () => {\n        const s = Symbol('some symbol');\n\n        const result = new IdentityMatcher(s)\n            .when(s, _ => `received \"some symbol\"`)\n            .else(_ => `else, received \"${_}\"`);\n\n        expect(result).to.equal('received \"some symbol\"');\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/spec/pattern-matching/IdentityMatcher.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "spec/pattern-matching/IdentityMatcher.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/pattern-matching/IdentityMatcher.spec.ts~describe34",
    "access": null,
    "description": "IdentityMatcher",
    "lineNumber": 5
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "spec/pattern-matching/IdentityMatcher.spec.ts~describe34",
    "testDepth": 1,
    "static": true,
    "longname": "spec/pattern-matching/IdentityMatcher.spec.ts~describe34.it35",
    "access": null,
    "description": "matches a symbol",
    "lineNumber": 22
  },
  {
    "__docId__": 146,
    "kind": "testFile",
    "name": "spec/pattern-matching/ObjectMatcher.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\n\nimport { TinyType } from '../../src';\nimport { ObjectMatcher } from '../../src/pattern-matching';\nimport { expect } from '../expect';\n\ndescribe('ObjectMatcher', () => {\n\n    describe('when working with Tiny Types', () => {\n\n        class Name extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n            }\n        }\n        class EmailAddress extends TinyType {\n            constructor(public readonly value: string) {\n                super();\n            }\n        }\n\n        given(\n            [ new Name('Jan'), `matched \"Jan\"` ],\n            [ new Name('John'), `matched \"John\"` ],\n            [ new Name('Sara'), `else, received \"Name(value=Sara)\"` ],\n        ).\n        it('matches equal objects', (input: Name, expectedMessage: string) => {\n            const result = new ObjectMatcher<TinyType, string>(input)\n                .when(new Name('Jan'), _ => `matched \"Jan\"`)\n                .when(new Name('John'), _ => `matched \"John\"`)\n                .else(_ => `else, received \"${_}\"`);\n\n            expect(result).to.equal(expectedMessage);\n        });\n\n        it('matches identical objects', () => {\n            const input = { field: 'value' };\n\n            const result = new ObjectMatcher(input)\n                .when(input, _ => `matched by identity`)\n                .else(_ => `else, received \"${_}\"`);\n\n            expect(result).to.equal(`matched by identity`);\n        });\n\n        given(\n            [ new Name('Jan'), `matched by equality` ],\n            [ new Name('John'), `matched by type` ],\n            [ new EmailAddress('jan@example.com'), `else, received \"EmailAddress(value=jan@example.com)\"` ],\n        ).\n        it('can be mixed', (input: Name, expectedMessage: string) => {\n            const result = new ObjectMatcher<TinyType, string>(input)\n                .when(new Name('Jan'), _ => `matched by equality`)\n                .when(Name, _ => `matched by type`)\n                .else(_ => `else, received \"${_}\"`);\n\n            expect(result).to.equal(expectedMessage);\n        });\n    });\n\n    describe('when working with regular classes', () => {\n        abstract class DomainEvent {\n            constructor(public readonly timestamp: Date) {\n            }\n        }\n\n        class AccountCreated extends DomainEvent {\n            constructor(public readonly account_name: string, timestamp: Date) {\n                super(timestamp);\n            }\n        }\n\n        class AccountConfirmed extends DomainEvent {\n            constructor(public readonly account_name: string,\n                        public readonly email: string,\n                        timestamp: Date,\n            ) {\n                super(timestamp);\n            }\n        }\n\n        class UnclassifiedEvent extends DomainEvent {\n        }\n\n        given(\n            [\n                new AccountCreated('jan-molak', new Date()),\n                `AccountCreated`,\n            ],\n            [\n                new AccountConfirmed('jan-molak', 'jan.molak@serenity.io', new Date()),\n                `AccountConfirmed`,\n            ],\n            [\n                new UnclassifiedEvent(new Date()),\n                `UnclassifiedEvent`,\n            ],\n        ).\n        it('matches object by constructor function', (input: DomainEvent, expected_result: string) => {\n\n            const result = new ObjectMatcher<DomainEvent, string>(input)\n                .when(AccountCreated, _ => `AccountCreated`)\n                .when(AccountConfirmed, _ => `AccountConfirmed`)\n                .when(DomainEvent, _ => `UnclassifiedEvent`)\n                .else(_ => `else, received \"${_}\"`);\n\n            expect(result).to.equal(expected_result);\n        });\n\n        // todo: mixed constructor/tiny?\n\n        given(\n            [\n                new AccountCreated('jan-molak', new Date()),\n                `Account created for jan-molak`,\n            ],\n            [\n                new AccountConfirmed('jan-molak', 'jan.molak@serenity.io', new Date()),\n                `Account confirmed for jan-molak at jan.molak@serenity.io`,\n            ],\n            [\n                new UnclassifiedEvent(new Date()),\n                `Some DomainEvent received`,\n            ],\n        ).\n        it('matches object by constructor function', (input: DomainEvent, expected_result: string) => {\n\n            const result = new ObjectMatcher<DomainEvent, string>(input)\n                .when(AccountCreated, ({ account_name }) => `Account created for ${ account_name }`)\n                .when(AccountConfirmed, ({ account_name, email }) => `Account confirmed for ${ account_name } at ${ email }`)\n                .when(DomainEvent, ({ timestamp }) => `Some DomainEvent received`)\n                .else(_ => `else, received \"${_}\"`);\n\n            expect(result).to.equal(expected_result);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/spec/pattern-matching/ObjectMatcher.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe36",
    "access": null,
    "description": "ObjectMatcher",
    "lineNumber": 6
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe36.describe37",
    "access": null,
    "description": "when working with Tiny Types",
    "lineNumber": 7
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts~describe36.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe36.describe37.it38",
    "access": null,
    "description": "matches identical objects",
    "lineNumber": 40
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "spec/pattern-matching/ObjectMatcher.spec.ts~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "spec/pattern-matching/ObjectMatcher.spec.ts~describe36.describe39",
    "access": null,
    "description": "when working with regular classes",
    "lineNumber": 56
  },
  {
    "__docId__": 151,
    "kind": "testFile",
    "name": "spec/pattern-matching/StringMatcher.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\nimport { StringMatcher } from '../../src/pattern-matching';\nimport { expect } from '../expect';\n\ndescribe('StringMatcher', () => {\n\n    given(\n        ['hello', 'matched a regular expression'],\n        ['hello world', 'matched the identity matcher'],\n    ).it('matches string and regular expressions', (input: string, expected_result: string) => {\n        const result = new StringMatcher(input)\n            .when('hello world', _ => `matched the identity matcher`)\n            .when(/^[Hh]ello.*$/, _ => `matched a regular expression`)\n            .else(_ => `else, received \"${_}\"`);\n\n        expect(result).to.equal(expected_result);\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/spec/pattern-matching/StringMatcher.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "describe40",
    "testId": 40,
    "memberof": "spec/pattern-matching/StringMatcher.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/pattern-matching/StringMatcher.spec.ts~describe40",
    "access": null,
    "description": "StringMatcher",
    "lineNumber": 5
  },
  {
    "__docId__": 153,
    "kind": "testFile",
    "name": "spec/pattern-matching/rules/MatchesAnything.spec.ts",
    "content": "import 'mocha';\nimport { given } from 'mocha-testdata';\nimport { MatchesAnything } from '../../../src/pattern-matching/rules';\nimport { expect } from '../../expect';\n\ndescribe('MatchesAnything', () => {\n\n    given(\n        1, false, {},\n    ).\n    it('is always executed', (input: any) => {\n        const rule = new MatchesAnything(_ => _);\n\n        expect(rule.matches(input)).to.be.true;                              // tslint:disable-line:no-unused-expression\n    });\n});\n",
    "static": true,
    "longname": "/home/travis/build/jan-molak/tiny-types/spec/pattern-matching/rules/MatchesAnything.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "spec/pattern-matching/rules/MatchesAnything.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/pattern-matching/rules/MatchesAnything.spec.ts~describe41",
    "access": null,
    "description": "MatchesAnything",
    "lineNumber": 5
  }
]